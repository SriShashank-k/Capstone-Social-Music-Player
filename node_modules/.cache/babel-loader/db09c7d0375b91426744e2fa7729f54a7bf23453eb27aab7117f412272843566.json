{"ast":null,"code":"var _jsxFileName = \"/Users/shashank/Downloads/music-player-app-fixed-working/src/components/BackgroundScene.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x050508);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Bloom\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);\n    composer.addPass(bloomPass);\n\n    // Speaker (cylinder + cone)\n    const speakerMaterial = new THREE.MeshStandardMaterial({\n      color: 0xff5555,\n      emissive: 0xff3333,\n      emissiveIntensity: 0.5\n    });\n    const speakerBody = new THREE.Mesh(new THREE.CylinderGeometry(0.5, 0.5, 1.5, 32), speakerMaterial);\n    scene.add(speakerBody);\n    const speakerCone = new THREE.Mesh(new THREE.ConeGeometry(0.3, 0.6, 32), speakerMaterial);\n    speakerCone.position.z = 0.75;\n    scene.add(speakerCone);\n\n    // Soundwaves (circles)\n    const soundwaveMaterial = new THREE.LineBasicMaterial({\n      color: 0x55aaff\n    });\n    const soundwaves = [];\n    for (let i = 1; i <= 5; i++) {\n      const geometry = new THREE.RingGeometry(i * 0.6, i * 0.6 + 0.02, 64);\n      const ring = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n        color: 0x55aaff,\n        transparent: true,\n        opacity: 0.4\n      }));\n      ring.rotation.x = -Math.PI / 2;\n      scene.add(ring);\n      soundwaves.push(ring);\n    }\n\n    // Light\n    const light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(5, 5, 5);\n    scene.add(light);\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n\n    // Animate\n    const clock = new THREE.Clock();\n    const animate = () => {\n      requestAnimationFrame(animate);\n      const elapsed = clock.getElapsedTime();\n\n      // Soundwave animation\n      soundwaves.forEach((ring, index) => {\n        const scale = 1 + 0.3 * Math.sin(elapsed * 2 + index);\n        ring.scale.set(scale, scale, scale);\n        ring.material.opacity = 0.3 + 0.2 * Math.sin(elapsed * 2 + index);\n      });\n      controls.update();\n      composer.render();\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: -1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(BackgroundScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = BackgroundScene;\nexport default BackgroundScene;\nvar _c;\n$RefreshReg$(_c, \"BackgroundScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","EffectComposer","RenderPass","UnrealBloomPass","jsxDEV","_jsxDEV","BackgroundScene","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","composer","addPass","bloomPass","Vector2","speakerMaterial","MeshStandardMaterial","color","emissive","emissiveIntensity","speakerBody","Mesh","CylinderGeometry","add","speakerCone","ConeGeometry","soundwaveMaterial","LineBasicMaterial","soundwaves","i","geometry","RingGeometry","ring","MeshBasicMaterial","transparent","opacity","rotation","x","Math","PI","push","light","PointLight","set","controls","enableDamping","clock","Clock","animate","requestAnimationFrame","elapsed","getElapsedTime","forEach","index","scale","sin","material","update","render","removeChild","ref","style","top","left","width","height","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shashank/Downloads/music-player-app-fixed-working/src/components/BackgroundScene.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\n\nconst BackgroundScene = () => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x050508);\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Bloom\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);\n    composer.addPass(bloomPass);\n\n    // Speaker (cylinder + cone)\n    const speakerMaterial = new THREE.MeshStandardMaterial({ color: 0xff5555, emissive: 0xff3333, emissiveIntensity: 0.5 });\n    const speakerBody = new THREE.Mesh(new THREE.CylinderGeometry(0.5, 0.5, 1.5, 32), speakerMaterial);\n    scene.add(speakerBody);\n\n    const speakerCone = new THREE.Mesh(new THREE.ConeGeometry(0.3, 0.6, 32), speakerMaterial);\n    speakerCone.position.z = 0.75;\n    scene.add(speakerCone);\n\n    // Soundwaves (circles)\n    const soundwaveMaterial = new THREE.LineBasicMaterial({ color: 0x55aaff });\n    const soundwaves = [];\n\n    for (let i = 1; i <= 5; i++) {\n      const geometry = new THREE.RingGeometry(i * 0.6, i * 0.6 + 0.02, 64);\n      const ring = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: 0x55aaff, transparent: true, opacity: 0.4 }));\n      ring.rotation.x = -Math.PI / 2;\n      scene.add(ring);\n      soundwaves.push(ring);\n    }\n\n    // Light\n    const light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(5, 5, 5);\n    scene.add(light);\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n\n    // Animate\n    const clock = new THREE.Clock();\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      const elapsed = clock.getElapsedTime();\n\n      // Soundwave animation\n      soundwaves.forEach((ring, index) => {\n        const scale = 1 + 0.3 * Math.sin(elapsed * 2 + index);\n        ring.scale.set(scale, scale, scale);\n        ring.material.opacity = 0.3 + 0.2 * Math.sin(elapsed * 2 + index);\n      });\n\n      controls.update();\n      composer.render();\n    };\n\n    animate();\n\n    // Cleanup\n    return () => {\n        if (mountRef.current && renderer.domElement) {\n          mountRef.current.removeChild(renderer.domElement);\n        }\n    };\n      \n  }, []);\n\n  return <div ref={mountRef} style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', zIndex: -1 }} />;\n};\n\nexport default BackgroundScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}